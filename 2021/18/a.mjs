class SnailfishNumber {
  static fromString(str) {
    return new this(
      str
        .split("")
        .filter((char) => char !== ",")
        .map((char) => (/[0-9]/.test(char) ? Number(char) : char))
    );
  }

  constructor(data) {
    /** @type {Array<string | number>} */
    this.data = data;
  }

  toString() {
    return String(this.data)
      .replace(/\[,(?=[\[0-9])/g, "[")
      .replace(/(?<=[0-9\]]),\]/g, "]");
  }

  reduce() {
    let mutated;
    do {
      mutated = false;
      let nesting = 0;
      for (let i = 0; i <= this.data.length; i++) {
        switch (this.data[i]) {
          case "[":
            if (nesting >= 4 && this.isPair(i)) {
              this.explodePair(i);
              mutated;
              nesting = 0;
              i = -1;
            } else {
              nesting += 1;
            }
            break;
          case "]":
            nesting -= 1;
            break;
          default:
            break;
        }
      }
      for (let i = 0; i <= this.data.length; i++) {
        if (this.isNumber(i)) {
          if (this.data[i] > 9) {
            this.splitIntoPair(i);
            mutated = true;
            break;
          }
        }
      }
    } while (mutated);
    return this;
  }

  explodePair(pos) {
    const [lval, rval] = this.data.slice(pos + 1, pos + 3);
    this.data.splice(pos, 4, 0);
    for (let i = pos - 1; i > 0; i--) {
      if (this.isNumber(i)) {
        this.data[i] += lval;
        break;
      }
    }
    for (let i = pos + 1; i < this.data.length; i++) {
      if (this.isNumber(i)) {
        this.data[i] += rval;
        break;
      }
    }
  }

  splitIntoPair(pos) {
    const val = this.data[pos];
    this.data.splice(pos, 1, "[", Math.floor(val / 2), Math.ceil(val / 2), "]");
  }

  getMagnitude() {
    // TODO avoid data mutations
    while (this.data.length > 1) {
      for (let i = 0; i < this.data.length; i++) {
        if (this.isPair(i)) {
          const [lval, rval] = this.data.slice(i + 1, i + 3);
          this.data.splice(i, 4, lval * 3 + rval * 2);
          break;
        }
      }
    }
    return this.data[0];
  }

  isPair(pos) {
    return (
      this.data[pos] === "[" &&
      this.isNumber(pos + 1) &&
      this.isNumber(pos + 2) &&
      this.data[pos + 3] === "]"
    );
  }

  isNumber(pos) {
    return typeof this.data[pos] === "number";
  }
}

const reduce = (str) => SnailfishNumber.fromString(str).reduce().toString();
const sum = (list) =>
  list.reduce((acc, val) => reduce(`[${acc},${val}]`), list.shift());
const magnitude = (str) => SnailfishNumber.fromString(str).getMagnitude();
const assertEqual = (a, b) => console.assert(a === b, "\n%s\n%s\n", a, b);

assertEqual(reduce("[[[[[9,8],1],2],3],4]"), "[[[[0,9],2],3],4]");
assertEqual(reduce("[7,[6,[5,[4,[3,2]]]]]"), "[7,[6,[5,[7,0]]]]");
assertEqual(reduce("[[6,[5,[4,[3,2]]]],1]"), "[[6,[5,[7,0]]],3]");
assertEqual(
  reduce("[[3,[2,[1,[7,3]]]],[6,[5,[4,[3,2]]]]]"),
  "[[3,[2,[8,0]]],[9,[5,[7,0]]]]"
);
assertEqual(
  reduce("[[[[[4,3],4],4],[7,[[8,4],9]]],[1,1]]"),
  "[[[[0,7],4],[[7,8],[6,0]]],[8,1]]"
);
assertEqual(reduce(""), "");
assertEqual(
  sum(
    `[1,1]
[2,2]
[3,3]
[4,4]`.split("\n")
  ),
  "[[[[1,1],[2,2]],[3,3]],[4,4]]"
);
assertEqual(
  sum(
    `[1,1]
[2,2]
[3,3]
[4,4]
[5,5]`.split("\n")
  ),
  "[[[[3,0],[5,3]],[4,4]],[5,5]]"
);
assertEqual(
  sum(
    `[1,1]
[2,2]
[3,3]
[4,4]
[5,5]
[6,6]`.split("\n")
  ),
  "[[[[5,0],[7,4]],[5,5]],[6,6]]"
);
assertEqual(
  sum(
    `[[[0,[4,5]],[0,0]],[[[4,5],[2,6]],[9,5]]]
[7,[[[3,7],[4,3]],[[6,3],[8,8]]]]
[[2,[[0,8],[3,4]]],[[[6,7],1],[7,[1,6]]]]
[[[[2,4],7],[6,[0,5]]],[[[6,8],[2,8]],[[2,1],[4,5]]]]
[7,[5,[[3,8],[1,4]]]]
[[2,[2,2]],[8,[8,1]]]
[2,9]
[1,[[[9,3],9],[[9,0],[0,7]]]]
[[[5,[7,4]],7],1]
[[[[4,2],2],6],[8,7]]`.split("\n")
  ),
  "[[[[8,7],[7,7]],[[8,6],[7,7]]],[[[0,7],[6,6]],[8,7]]]"
);
assertEqual(
  sum(
    `[[[0,[4,5]],[0,0]],[[[4,5],[2,6]],[9,5]]]
[7,[[[3,7],[4,3]],[[6,3],[8,8]]]]`.split("\n")
  ),
  "[[[[4,0],[5,4]],[[7,7],[6,0]]],[[8,[7,7]],[[7,9],[5,0]]]]"
);
assertEqual(magnitude("[9,1]"), 29);
assertEqual(magnitude("[[1,2],[[3,4],5]]"), 143);
assertEqual(magnitude("[[[[0,7],4],[[7,8],[6,0]]],[8,1]]"), 1384);
assertEqual(magnitude("[[[[1,1],[2,2]],[3,3]],[4,4]]"), 445);
assertEqual(magnitude("[[[[3,0],[5,3]],[4,4]],[5,5]]"), 791);
assertEqual(magnitude("[[[[5,0],[7,4]],[5,5]],[6,6]]"), 1137);
assertEqual(
  magnitude("[[[[8,7],[7,7]],[[8,6],[7,7]]],[[[0,7],[6,6]],[8,7]]]"),
  3488
);
assertEqual(
  sum(
    `[[[0,[5,8]],[[1,7],[9,6]]],[[4,[1,2]],[[1,4],2]]]
[[[5,[2,8]],4],[5,[[9,9],0]]]
[6,[[[6,2],[5,6]],[[7,6],[4,7]]]]
[[[6,[0,7]],[0,9]],[4,[9,[9,0]]]]
[[[7,[6,4]],[3,[1,3]]],[[[5,5],1],9]]
[[6,[[7,3],[3,2]]],[[[3,8],[5,7]],4]]
[[[[5,4],[7,7]],8],[[8,3],8]]
[[9,3],[[9,9],[6,[4,9]]]]
[[2,[[7,7],7]],[[5,8],[[9,3],[0,2]]]]
[[[[5,2],5],[8,[3,7]]],[[5,[7,5]],[4,4]]]`.split("\n")
  ),
  "[[[[6,6],[7,6]],[[7,7],[7,0]]],[[[7,7],[7,7]],[[7,8],[9,9]]]]"
);
assertEqual(
  magnitude("[[[[6,6],[7,6]],[[7,7],[7,0]]],[[[7,7],[7,7]],[[7,8],[9,9]]]]"),
  4140
);
const input = `[[[4,5],[[0,6],[4,5]]],[3,[[5,0],[0,8]]]]
[[8,3],2]
[[4,[7,[5,6]]],[[[7,8],5],[[7,0],1]]]
[[[1,8],[7,6]],[[8,6],[3,2]]]
[[[4,[2,0]],[1,[7,0]]],9]
[2,[[[2,3],5],[6,5]]]
[9,[1,[0,3]]]
[5,[5,[8,[8,4]]]]
[5,[1,[4,[0,8]]]]
[1,[[[6,1],9],2]]
[7,[[6,1],[[7,8],[4,2]]]]
[[[[6,6],[3,3]],[6,[7,6]]],4]
[[[3,[9,8]],[[6,6],[9,3]]],[[[9,2],3],[[7,6],0]]]
[[[[5,2],6],[9,[1,7]]],[[9,9],[9,[4,3]]]]
[[[7,6],[9,5]],[[[6,3],[8,4]],[[4,0],8]]]
[[[0,[1,9]],[8,[4,4]]],1]
[[1,[1,[9,4]]],[5,[[9,3],9]]]
[[[1,3],[[2,3],9]],[7,9]]
[[8,[[6,9],[5,9]]],[5,[5,[9,4]]]]
[[[[3,7],[8,0]],[4,[8,9]]],[[[3,8],[3,5]],[9,0]]]
[[[0,5],[5,1]],[3,[0,[0,5]]]]
[7,[[4,[1,6]],0]]
[[3,[4,4]],[[[0,5],9],[8,[9,5]]]]
[[8,[5,2]],[[[7,4],[3,2]],4]]
[[[[6,4],[7,9]],5],[3,[[4,3],[4,3]]]]
[[[[7,0],6],[6,7]],[[[9,7],[3,7]],[[4,1],[0,6]]]]
[[6,[[1,0],[1,7]]],[3,[3,0]]]
[[[2,[6,0]],4],[[3,9],[4,1]]]
[[[0,[8,4]],[[8,7],5]],[1,6]]
[[[[4,0],7],9],[6,[8,[9,3]]]]
[[[[0,8],7],[5,[4,0]]],[5,[6,[8,7]]]]
[[[1,4],[[9,7],4]],[[4,[6,4]],1]]
[[5,[[8,6],9]],1]
[[[[5,7],[8,3]],[[3,2],[1,9]]],[2,[1,2]]]
[[[9,6],[1,5]],[8,6]]
[3,1]
[[2,[[2,0],4]],[[[3,4],1],3]]
[[[[8,6],[5,9]],7],2]
[[[[1,0],[8,5]],[[6,5],[0,0]]],[[[3,4],[4,6]],[[5,0],8]]]
[[[[6,4],[9,4]],[[2,1],[2,2]]],[[[7,9],1],[[6,1],5]]]
[2,[[4,4],5]]
[[[[0,8],9],[8,6]],[[[9,7],[0,8]],[[9,3],7]]]
[[[[2,0],[7,8]],[[8,5],[6,8]]],[7,[[1,1],[2,3]]]]
[[9,[5,[4,7]]],[0,[9,2]]]
[5,[[[7,5],3],[6,[5,3]]]]
[[1,[5,1]],[[[0,3],[3,9]],3]]
[7,[[0,[0,1]],[1,2]]]
[[4,[8,0]],[3,[[2,4],7]]]
[8,[[1,[8,9]],[0,0]]]
[0,[[2,9],[[9,7],[5,3]]]]
[[[6,[3,4]],[[0,6],[4,3]]],9]
[[[[0,6],6],6],[[7,8],[[7,3],[5,0]]]]
[[[7,[4,5]],[9,2]],[6,[[5,5],[0,2]]]]
[[[6,8],[5,[0,8]]],[[1,[6,6]],[0,6]]]
[[[[4,7],7],[2,7]],[[8,0],[[6,5],[2,0]]]]
[8,[[4,9],[[8,8],2]]]
[2,[[4,[5,8]],[[8,7],[0,9]]]]
[[[[2,8],0],6],[[[4,4],0],[1,3]]]
[1,[[[8,5],1],8]]
[[3,3],[[[5,6],[6,2]],5]]
[[9,2],[3,[[3,2],4]]]
[[[[2,4],[6,3]],[[4,6],4]],[[[1,9],[0,4]],[[2,6],[9,0]]]]
[[[4,[6,7]],[[8,4],[6,2]]],[[5,2],[[4,8],0]]]
[[[6,0],[[3,2],5]],[[[9,0],[7,0]],5]]
[[2,[9,3]],[[4,[4,6]],[9,6]]]
[[3,[3,6]],[[[2,4],1],[9,[7,7]]]]
[4,[1,[[3,6],[4,1]]]]
[[3,7],[[5,6],6]]
[[[0,8],4],[[3,5],[[6,2],6]]]
[[[6,[8,9]],[5,[2,4]]],[4,[3,4]]]
[5,[[[6,8],[5,7]],[5,[9,9]]]]
[[[[9,5],6],3],[[[8,2],4],[1,8]]]
[[9,[9,3]],[[[5,7],0],[[5,4],[7,4]]]]
[[[[7,7],7],6],9]
[[9,8],[2,[7,7]]]
[[[[5,9],6],[8,[9,2]]],[[[8,5],[9,5]],[3,[8,3]]]]
[[[4,[3,8]],[8,[4,3]]],[[0,5],[5,[4,5]]]]
[[[0,5],[[7,7],5]],[[[2,7],[6,0]],[[7,9],[2,2]]]]
[6,[2,8]]
[[[2,7],7],[[[8,4],[3,9]],1]]
[[[2,0],[[0,5],[9,4]]],[[7,[6,2]],9]]
[[1,[[8,3],[3,4]]],1]
[[[[2,0],9],3],[1,[7,[2,1]]]]
[4,[[6,[5,7]],[[1,1],[0,5]]]]
[[[6,[0,7]],[4,[8,6]]],3]
[[[8,5],6],[1,[[6,0],4]]]
[[[[6,5],[5,6]],[[0,1],[2,7]]],[[7,[7,6]],[[3,2],[4,0]]]]
[[[5,[0,0]],0],5]
[[[[7,2],[5,9]],2],[3,7]]
[7,[[[1,1],4],[[4,4],2]]]
[9,[[[9,1],1],3]]
[[[[6,9],[3,9]],[7,[1,5]]],[[[5,0],6],[[5,9],8]]]
[[7,[1,[2,1]]],[7,[[6,3],[7,1]]]]
[3,[0,[1,3]]]
[9,[[[6,6],6],[6,4]]]
[[[2,[0,4]],1],[[9,[5,1]],[[9,6],[5,2]]]]
[[[9,8],6],[0,[6,[0,5]]]]
[[[7,3],[[9,9],0]],7]
[[[7,5],[6,8]],[6,[[0,8],9]]]
[[[2,[0,5]],[[2,9],[5,7]]],7]`.split("\n");
console.log(magnitude(sum(input)));
